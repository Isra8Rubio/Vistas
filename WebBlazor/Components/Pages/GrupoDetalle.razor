@page "/grupos/{id}"
@using MudBlazor
@using API.APIService
@inject APIClient Api
@inject NavigationManager Nav

<!-- Top bar -->
<MudStack Row="true"
          AlignItems="AlignItems.Center"
          Justify="Justify.FlexStart"
          Class="pa-2 mt-4"
          Style="width:100%;">
    <MudButton Variant="Variant.Outlined"
               Color="Color.Primary"
               StartIcon="@Icons.Material.Filled.ArrowBack"
               OnClick="@Back"
               Class="pa-2">
        Volver
    </MudButton>
</MudStack>

@if (loading)
{
    <MudCard Class="mt-3 mx-auto" Style="max-width: 960px; border:2px solid white; background-color: var(--mud-palette-table-striped);">
        <MudCardHeader>
            <CardHeaderContent>
                <MudSkeleton Width="260px" Height="22px" Animation="Animation.Wave" />
                <MudSkeleton Width="180px" Height="16px" Class="mt-1" Animation="Animation.Wave" />
            </CardHeaderContent>
            <CardHeaderActions>
                <MudSkeleton Width="120px" Height="28px" Animation="Animation.Wave" />
            </CardHeaderActions>
        </MudCardHeader>
        <MudDivider />
        <MudCardContent>
            <MudSkeleton Width="220px" Height="40px" Animation="Animation.Wave" />
            <MudSkeleton Width="100%" Height="46px" Class="mt-2" Animation="Animation.Wave" />
            @for (var i = 0; i < 4; i++)
            {
                <MudSkeleton Width="100%" Height="42px" Class="mt-1" Animation="Animation.Wave" />
            }
        </MudCardContent>
    </MudCard>
}
else if (error is not null)
{
    <MudAlert Severity="Severity.Error" Variant="Variant.Outlined" Elevation="0" Class="mt-3 mx-auto" Style="max-width: 960px;">
        @error
        <MudButton OnClick="Reload" Color="Color.Error" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Refresh" Class="ml-2">
            Reintentar
        </MudButton>
    </MudAlert>
}
else if (group is not null)
{
    <MudCard Class="pa-0 mt-3 mx-auto" Style="max-width: 960px; border:2px solid white; background-color: var(--mud-palette-table-striped);">

        <!-- Header -->
        <MudCardHeader>
            <CardHeaderContent>
                <MudStack Spacing="1">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                        <MudIcon Icon="@Icons.Material.Filled.Groups" />
                        <MudText Typo="Typo.h6">@group.Name</MudText>
                    </MudStack>
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1" Class="mud-text-secondary">
                        <MudIcon Icon="@Icons.Material.Outlined.Schedule" Size="Size.Small" />
                        <MudText Typo="Typo.caption">
                            Último cambio: @group.DateModified?.ToString("dd/MM/yyyy HH:mm")
                        </MudText>
                    </MudStack>
                </MudStack>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudChip T="int" Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Small" StartIcon="@Icons.Material.Filled.Person">
                    @(group.MemberCount ?? 0) miembros
                </MudChip>
            </CardHeaderActions>
        </MudCardHeader>

        <MudDivider />

        <!-- Content -->
        <MudCardContent Class="pa-4">
            <MudStack Spacing="1">

                <!-- Buscador -->
                <MudTextField T="string"
                              @bind-Value="Search"
                              Label="Buscar usuario"
                              Variant="Variant.Outlined"
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              AdornmentColor="Color.Primary"
                              Immediate="true"
                              DebounceInterval="250"
                              Class="mb-2"
                              Style="max-width: 420px;" />

                <!-- Título lista -->
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                    <MudText Typo="Typo.subtitle2">
                        Usuarios (@(FilteredUsers.Count()))
                    </MudText>
                </MudStack>

                @if (FilteredUsers.Any())
                {
                    <!-- DataGrid con estilo consistente -->
                    <MudDataGrid T="UserDTO"
                                 Items="FilteredUsers"
                                 Hover="true"
                                 Dense="true"
                                 Bordered="true"
                                 Striped="true"
                                 RowClick="GotoUser"
                                 Class="mt-1">

                        <Columns>
                            <TemplateColumn Title="Usuario" Sortable="true"
                                            HeaderStyle="text-align:left; font-size:.95rem; font-weight:600"
                                            CellStyle="max-width:380px; white-space:nowrap; overflow:hidden; text-overflow:ellipsis; cursor:pointer;">
                                <CellTemplate>
                                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                        <MudAvatar Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled">
                                            @Initials(context.Item?.Name)
                                        </MudAvatar>
                                        <MudText>
                                            @(!string.IsNullOrWhiteSpace(context.Item?.Name) ? context.Item!.Name : context.Item?.Id)
                                        </MudText>
                                    </MudStack>
                                </CellTemplate>
                            </TemplateColumn>

                            <PropertyColumn Property="x => x.Email" Title="Email" Sortable="true"
                                            HeaderStyle="text-align:left; font-size:.95rem; font-weight:600"
                                            CellStyle="max-width:420px; white-space:nowrap; overflow:hidden; text-overflow:ellipsis;" />
                        </Columns>

                        <PagerContent>
                            <MudDataGridPager T="UserDTO" />
                        </PagerContent>
                    </MudDataGrid>
                }
                else
                {
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1" Class="mud-text-secondary">
                        <MudIcon Icon="@Icons.Material.Outlined.Info" />
                        <MudText Typo="Typo.caption">Sin usuarios</MudText>
                    </MudStack>
                }
            </MudStack>
        </MudCardContent>
    </MudCard>
}

@code {
    [Parameter] public string? id { get; set; }

    private GroupDTO? group;
    private bool loading = true;
    private string? error;

    private string? Search { get; set; }

    private IEnumerable<UserDTO> FilteredUsers =>
        (group?.ListaUsuarios ?? Enumerable.Empty<UserDTO>()).Where(u =>
            string.IsNullOrWhiteSpace(Search) ||
            (u.Name?.Contains(Search, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (u.Email?.Contains(Search, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (u.Id?.Contains(Search, StringComparison.OrdinalIgnoreCase) ?? false));

    protected override async Task OnParametersSetAsync()
    {
        loading = true; error = null; group = null;
        try
        {
            if (string.IsNullOrWhiteSpace(id)) { error = "Id de grupo no válido."; return; }
            group = await Api.Groups_GetGroupByIdAsync(id);
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally { loading = false; }
    }

    void Back() => Nav.NavigateTo("/grupos");

    void Reload()
    {
        _ = OnParametersSetAsync();
        StateHasChanged();
    }

    void GotoUser(DataGridRowClickEventArgs<UserDTO> args)
    {
        if (!string.IsNullOrWhiteSpace(args.Item.Id))
            Nav.NavigateTo($"/usuarios/{args.Item.Id}");
    }

    static string Initials(string? name)
    {
        if (string.IsNullOrWhiteSpace(name)) return "?";
        var parts = name.Trim().Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length == 1) return parts[0].Substring(0, 1).ToUpperInvariant();
        return (parts[0][0].ToString() + parts[^1][0]).ToUpperInvariant();
    }
}
