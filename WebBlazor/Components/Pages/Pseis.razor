@page "/p7"
@using MudBlazor
@using System.Globalization

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudPaper Elevation="2" Class="pa-4" Style="font-family:'Inter',system-ui,-apple-system,Helvetica;">
        <MudText Typo="Typo.h5" Class="mb-4">Conversation Timeline</MudText>

        <!-- Participantes (cabecera ejemplo) -->
        <MudGrid Class="mb-4">
            <MudItem xs="6">
                <MudPaper Class="pa-2 d-flex align-center">
                    <MudAvatar Color="Color.Primary" Size="Size.Small" Class="mr-2">IP</MudAvatar>
                    <MudText>Internal Participant</MudText>
                </MudPaper>
            </MudItem>
            <MudItem xs="6">
                <MudPaper Class="pa-2 d-flex align-center">
                    <MudAvatar Color="Color.Secondary" Size="Size.Small" Class="mr-2">EP</MudAvatar>
                    <MudText>External Participant</MudText>
                </MudPaper>
            </MudItem>
        </MudGrid>

        <!-- Leyenda -->
        <div class="legend">
            <div class="legend-item"><i class="legend-color wait"></i><span>Wait</span></div>
            <div class="legend-item"><i class="legend-color call"></i><span>Call/Intent</span></div>
            <div class="legend-item"><i class="legend-color wrapup"></i><span>Wrapup</span></div>
            <div class="legend-item"><i class="legend-color ivr"></i><span>IVR</span></div>
        </div>

        <!-- Timeline (DIVs, con lógica de posicionamiento por minuto) -->
        <MudPaper Elevation="1" Class="pa-4" Style="--labelw:140px;">
            <MudText Typo="Typo.h6" Class="mb-3">Conversation Detail</MudText>

            <div class="tl-root">
                <!-- Filas -->
                @for (int i = 0; i < Lanes.Count; i++)
                {
                    var lane = Lanes[i];
                    <div class="tl-row @(i % 2 == 0 ? "zebra-a" : "zebra-b")">

                        <div class="tl-label">@lane</div>

                        <div class="tl-bar">
                            <!-- grid vertical: cada 1 y fuerte cada 5 -->
                            @foreach (var m in Minutes)
                            {
                                <div class="vline minor" style="left:@Pct(m)"></div>
                            }
                            @foreach (var m in MajorMinutes)
                            {
                                <div class="vline major" style="left:@Pct(m)"></div>
                            }

                            <!-- segmentos de este carril -->
                            @foreach (var s in Segments.Where(s => s.Lane == lane))
                            {
                                var left = Pct(s.StartMin);
                                var width = Pct(s.EndMin - s.StartMin);
                                <div class="segment @CssKind(s.Kind)"
                                     style="left:@left; width:@width"
                                     title="@($"{s.Kind} · {s.StartMin:00}-{s.EndMin:00}")">
                                </div>
                            }
                        </div>
                    </div>
                }

                <!-- Eje inferior 00..59 -->
                <div class="tl-axis">
                    @foreach (var m in Minutes)
                    {
                        bool major = m % 5 == 0;
                        <div class="tick" style="left:@Pct(m)">
                            <i class="@(major ? "t-major" : "t-minor")"></i>
                            <span class="@(major ? "l-major" : "l-minor")">@m.ToString("00")</span>
                        </div>
                    }
                </div>
            </div>
        </MudPaper>

        <!-- Controles (decorativos) -->
@*         Style="border:1px solid var(--mud-palette-primary);" *@
        <MudGrid Class="mt-4">
            <MudItem xs="3"><MudButton Variant="Variant.Outlined" Style="border:2px solid white;" Color="Color.Primary" StartIcon="Icons.Material.Filled.PlayArrow" FullWidth>Play</MudButton></MudItem>
            <MudItem xs="3"><MudButton Variant="Variant.Outlined" Style="border:2px solid white;" Color="Color.Primary" StartIcon="Icons.Material.Filled.Pause" FullWidth>Pause</MudButton></MudItem>
            <MudItem xs="3"><MudButton Variant="Variant.Outlined" Style="border:2px solid white;" Color="Color.Primary" StartIcon="Icons.Material.Filled.ZoomIn" FullWidth>Zoom In</MudButton></MudItem>
            <MudItem xs="3"><MudButton Variant="Variant.Outlined" Style="border:2px solid white;" Color="Color.Primary" StartIcon="Icons.Material.Filled.ZoomOut" FullWidth>Zoom Out</MudButton></MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>

@code {
    /* ----- Datos / modelo ----- */
    private record Seg(string Lane, string Kind, int StartMin, int EndMin);
    private List<string> Lanes = new() { "Customer", "IVR #1", "IVR #2", "Agent (Call)", "Agent (Wrapup)" };
    private List<Seg> Segments = default!;

    /* ----- Escala 0..59 (minuto a porcentaje) ----- */
    private const int Duration = 60;                              // 0..59
    private static readonly CultureInfo CI = CultureInfo.InvariantCulture;
    private string Pct(int min) => (min * 100.0 / (Duration - 1)).ToString("0.###", CI) + "%";
    private IEnumerable<int> Minutes => Enumerable.Range(0, Duration);
    private IEnumerable<int> MajorMinutes => Minutes.Where(m => m % 5 == 0);

    private static string CssKind(string k) => k.ToLowerInvariant() switch
    { "ivr" => "ivr", "wait" => "wait", "wrapup" => "wrapup", _ => "call" };

    protected override void OnInitialized()
    {
        // mismo guion que el SVG
        var s = new List<Seg>
        {
            // Llamada 1 (3–15)
            new("Customer","Call",   3,13),
            new("IVR #1","IVR",      3,4),
            new("IVR #2","IVR",      4,6),
            new("Agent (Call)","Wait",6,7),
            new("Agent (Call)","Call",7,13),
            new("Agent (Wrapup)","Wrapup",13,15),

            // Llamada 2 (21–35)
            new("Customer","Call",   21,35),
            new("IVR #1","IVR",      21,22),
            new("IVR #2","IVR",      22,24),
            new("Agent (Call)","Wait",24,25),
            new("Agent (Call)","Call",25,33),
            new("Agent (Wrapup)","Wrapup",33,35),
        };
        Segments = s;
    }
}
