@page "/usuarios"
@using CsvHelper
@using MudBlazor
@using API.APIService
@using System.Text
@using System.Globalization
@inject APIClient Api
@inject NavigationManager Nav
@inject IJSRuntime JS

<MudDataGrid @ref="dataGrid"
             T="UserDTO"
             ServerData="ServerReload"
             Filterable="true"
             Hover="true"
             Dense="true"
             Bordered="true"
             Striped="true"
             RowClick="GotoUser"
             Class="mt-4 pa-2"
             Style="font-family: 'Inter', system-ui, -apple-system, Helvetica; font-variant-numeric: tabular-nums;">

    <ToolBarContent>
        <MudSpacer />
        <MudTextField T="string"
                      @bind-Value="Search"
                      Label="Buscar"
                      Variant="Variant.Outlined"
                      Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      AdornmentColor="Color.Primary"
                      Immediate="true"
                      DebounceInterval="300"
                      Class="mt-2 mb-1" />
        <MudIconButton Icon="@Icons.Material.Filled.Clear"
                       OnClick="ClearFilters"
                       Class="ml-1 mt-2" />

        <!-- Botón Exportar CSV -->
        <MudButton Class="ml-2 mt-2" Variant="Variant.Outlined" Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.Download" OnClick="ExportCsv">
            Exportar CSV
        </MudButton>
    </ToolBarContent>

    <Columns>
        <PropertyColumn Property="x => x.Name" Title="Usuario" Sortable="true" Filterable="true"
                        HeaderStyle="text-align:left; font-size:.95rem; font-weight:600"
                        CellStyle="max-width:280px; white-space:nowrap; overflow:hidden; text-overflow:ellipsis; text-align:left; cursor:pointer" />

        <PropertyColumn Property="x => x.Email" Title="Email" Sortable="true" Filterable="true"
                        HeaderStyle="text-align:left; font-size:.95rem; font-weight:600"
                        CellStyle="max-width:280px;text-align:left" />

        <!-- Grupos (chips) -->
        <TemplateColumn Title="Grupos" Sortable="false" Filterable="true"
                        HeaderStyle="text-align:left; font-size:.95rem; font-weight:600; white-space:nowrap"
                        CellStyle="text-align:left; white-space:normal;">
            <CellTemplate>
                @if (context.Item.ListaGrupos is { Count: > 0 })
                {
                    <div style="display:flex; flex-wrap:wrap; gap:.25rem; align-items:center;">
                        @foreach (var g in context.Item.ListaGrupos)
                        {
                            var label = !string.IsNullOrWhiteSpace(g.Name) ? g.Name : g.Id;
                            <MudTooltip Text="@($"Id: {g.Id}")">
                                <MudChip Class="mr-1 mb-1" Size="Size.Small" Variant="Variant.Outlined">
                                    @label
                                </MudChip>
                            </MudTooltip>
                        }
                    </div>
                }
                else
                {
                    <MudText Typo="Typo.caption" Class="mud-text-secondary">—</MudText>
                }
            </CellTemplate>
        </TemplateColumn>

    </Columns>

    <PagerContent>
        <MudDataGridPager T="UserDTO" />
    </PagerContent>
</MudDataGrid>

@if (seleccionado is not null)
{
    var grupos = seleccionado.ListaGrupos ?? new List<GroupDTO>();

    <MudPaper Class="pa-4 mt-4"
              Style="width:100%; max-width: 420px; margin: 0 auto;
                     background-color: var(--mud-palette-table-striped);
                     border:1px solid var(--mud-palette-primary);">

        <MudText Typo="Typo.h6">@seleccionado.Name</MudText>
        <MudText Class="mb-2">@seleccionado.Email</MudText>

        <MudDivider Class="my-2" />

        <MudText Typo="Typo.subtitle2" Class="mb-1">Grupos (@grupos.Count)</MudText>

        @if (grupos.Count > 0)
        {
            <div style="display:flex; flex-wrap:wrap; gap:.25rem;">
                @foreach (var g in grupos)
                {
                    var label = !string.IsNullOrWhiteSpace(g?.Name) ? g!.Name : g?.Id;

                    <MudTooltip Text="@($"Id: {g?.Id}")">
                        <MudChip T="string" Class="mr-1 mb-1" Size="Size.Small" Variant="Variant.Outlined">
                            @label
                        </MudChip>
                    </MudTooltip>
                }
            </div>
        }
        else
        {
            <MudText Typo="Typo.caption" Class="mud-text-secondary">Sin grupos</MudText>
        }
    </MudPaper>
}


@code {
    private List<UserDTO> _lastItems = new();
    private MudDataGrid<UserDTO>? dataGrid;
    private UserDTO? seleccionado;

    private Task ClearFilters()
    {
        Search = null;
        seleccionado = null;
        return dataGrid?.ReloadServerData() ?? Task.CompletedTask;
    }

    // Búsqueda
    private string? _search;
    private string? Search
    {
        get => _search;
        set { if (_search == value) return; _search = value; _ = dataGrid?.ReloadServerData(); }
    }

    private async Task<GridData<UserDTO>> ServerReload(GridState<UserDTO> state)
    {
        try
        {
            var pageNumber = state.Page + 1;
            var pageSize = state.PageSize;
            var data = await Api.Users_GetUsersAsync(pageNumber, pageSize);

            var total = data.Total > 0 ? data.Total
                                       : (data.PageCount > 0 && data.PageSize > 0
                                          ? data.PageCount * data.PageSize
                                          : data.Entities.Count);

            IEnumerable<UserDTO> items = data.Entities;

            if (!string.IsNullOrWhiteSpace(_search))
            {
                var q = _search.Trim();
                items = items.Where(x =>
                    (x.Name?.Contains(q, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (x.Email?.Contains(q, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (x.ListaGrupos?.Any(g => g.Name?.Contains(q, StringComparison.OrdinalIgnoreCase) ?? false) ?? false));
            }

            var list = items.ToList();
            _lastItems = list; // guardamos lo que ve el grid ahora

            return new GridData<UserDTO>
            {
                TotalItems = (int)total,
                Items = list
            };
        }
        catch
        {
            _lastItems = new();
            return new GridData<UserDTO> { TotalItems = 0, Items = [] };
        }
    }

    private async Task ExportCsv()
    {
        // Proyectamos a un “row” plano para el CSV
        var rows = _lastItems.Select(u => new ExportUserRow
        {
            Usuario = u.Name ?? "",
            Email = u.Email ?? "",
            Grupos = u.ListaGrupos is { Count: > 0 }
                     ? string.Join(" | ", u.ListaGrupos.Where(g => g is not null).Select(g => string.IsNullOrWhiteSpace(g!.Name) ? g.Id : g.Name))
                     : ""
        });

        using var sw = new StringWriter(new StringBuilder());
        using (var csv = new CsvWriter(sw, CultureInfo.GetCultureInfo("es-ES")))
        {
            csv.WriteHeader<ExportUserRow>();
            await csv.NextRecordAsync();
            foreach (var r in rows)
            {
                csv.WriteRecord(r);
                await csv.NextRecordAsync();
            }
        }

        var csvContent = sw.ToString();

        var module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/DownloadCSV.js");
        await module.InvokeVoidAsync("saveFile", $"usuarios_{DateTime.Now:yyyyMMdd_HHmm}.csv", csvContent);
    }

    public class ExportUserRow
    {
        public string Usuario { get; set; } = "";
        public string Email { get; set; } = "";
        public string Grupos { get; set; } = "";
    }

    private void OnRowClick(DataGridRowClickEventArgs<UserDTO> args) => seleccionado = args.Item;

    private void GotoUser(DataGridRowClickEventArgs<UserDTO> args)
    => Nav.NavigateTo($"/usuarios/{args.Item.Id}");
}
