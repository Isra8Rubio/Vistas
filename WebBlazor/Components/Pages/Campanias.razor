@page "/campanias"
@using MudBlazor
@using WebBlazor.DTO

<MudDataGrid @ref="dataGrid"
             T="CampaniaListadoDTO"
             ServerData="ServerReload"
             Filterable="true"
             Hover="true"
             Dense="true"
             Bordered="true"
             Striped="true"
             RowClick="OnRowClick"
             Class="mt-4 pa-2"
             Style="font-family: 'Inter', system-ui, -apple-system, Helvetica; font-variant-numeric: tabular-nums;">

    <ToolBarContent>
        <MudSpacer />
        <MudTextField T="string"
                      @bind-Value="Search"
                      Label="Buscar"
                      Variant="Variant.Outlined"
                      Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      AdornmentColor="Color.Primary"
                      Immediate="true"
                      DebounceInterval="300"
                      Class="mt-2 mb-1" />
        <MudIconButton Icon="@Icons.Material.Filled.Clear"
                       OnClick="ClearFilters"
                       Class="ml-1 mt-2"
                       Title="Limpiar búsqueda" />
    </ToolBarContent>

    <Columns>
        <PropertyColumn Property="x => x.Titulo" Title="Campaña" Sortable="true" Filterable="true"
                        HeaderStyle="text-align:left; font-size:.95rem; font-weight:600"
                        CellStyle="text-align:left; cursor:pointer" />

        <TemplateColumn Title="Estado" Field="Estado" Sortable="true" Filterable="true"
                        HeaderStyle="text-align:center; font-size:.95rem; font-weight:600"
                        CellStyle="max-width:120px;width:120px;text-align:center">
            <CellTemplate>
                <MudChip T="string" Size="Size.Small" Variant="Variant.Outlined"
                         Color="@(context.Item.Estado switch {
                             "Planificada" => Color.Surface,
                             "En curso"    => Color.Info,
                             "Pausada"     => Color.Secondary,
                             "Finalizada"  => Color.Success,
                             _             => Color.Default
                         })">
                    @context.Item.Estado
                </MudChip>
            </CellTemplate>
        </TemplateColumn>

        <PropertyColumn Property="x => x.Canal" Title="Canal" Sortable="true" Filterable="true"
                        HeaderStyle="text-align:left; font-size:.95rem; font-weight:600"
                        CellStyle="max-width:84px;width:84px;text-align:left" />

        <TemplateColumn Title="División" Field="DivisionCodigo" Sortable="true" Filterable="true"
                        HeaderStyle="text-align:left; font-size:.95rem; font-weight:600"
                        CellStyle="max-width:84px;width:84px;text-align:left">
            <CellTemplate>
                <MudChip T="string" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Default"
                         Title="@($"{context.Item.DivisionNombre} ({context.Item.DivisionCodigo})")">
                    @context.Item.DivisionCodigo
                </MudChip>
                <MudText Class="ml-1" Typo="Typo.body2">@context.Item.DivisionNombre</MudText>
            </CellTemplate>
        </TemplateColumn>

        <PropertyColumn Property="x => x.Inicio" Title="Inicio" Sortable="true" Filterable="true"
                        Format="dd/MM/yyyy"
                        HeaderStyle="text-align:left; font-size:.95rem; font-weight:600; white-space:nowrap"
                        CellStyle="max-width:64px;width:64px;text-align:center" />

        <TemplateColumn Title="Fin" Field="Fin" Sortable="true" Filterable="true"
                        HeaderStyle="text-align:left; font-size:.95rem; font-weight:600; white-space:nowrap"
                        CellStyle="max-width:64px;width:64px;text-align:center">
            <CellTemplate>
                @(context.Item.Fin?.ToString("dd/MM/yyyy") ?? "—")
            </CellTemplate>
        </TemplateColumn>
    </Columns>

    <PagerContent>
        <MudDataGridPager T="CampaniaListadoDTO" />
    </PagerContent>
</MudDataGrid>

@if (seleccionada is not null)
{
    var dias = (int)Math.Round(((seleccionada.Fin ?? DateTime.Today) - seleccionada.Inicio).TotalDays);

    <MudPaper Class="pa-4 mt-4"
              Style="width:100%; max-width: 480px; margin: 0 auto;
                     background-color: var(--mud-palette-table-striped);
                     border:1px solid var(--mud-palette-primary);">
        <MudText Typo="Typo.h6">@seleccionada.Titulo</MudText>

        <div class="mb-2">
            <MudChip T="string" Size="Size.Small" Variant="Variant.Outlined"
                     Color="@(seleccionada.Estado switch {
                         "Planificada" => Color.Surface,
                         "En curso"    => Color.Info,
                         "Pausada"     => Color.Secondary,
                         "Finalizada"  => Color.Success,
                         _             => Color.Default
                     })">
                @seleccionada.Estado
            </MudChip>

            <MudChip T="string" Size="Size.Small" Variant="Variant.Outlined" Class="ml-1">
                @seleccionada.Canal
            </MudChip>

            <MudChip T="string" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Default" Class="ml-1">
                @($"{seleccionada.DivisionNombre} ({seleccionada.DivisionCodigo})")
            </MudChip>
        </div>

        <MudText Class="mb-1"><b>Periodo:</b> @seleccionada.Inicio.ToString("dd/MM/yyyy") → @(seleccionada.Fin?.ToString("dd/MM/yyyy") ?? "Sin fin")</MudText>
        <MudText Class="mb-2"><b>Duración:</b> @dias días</MudText>

        <MudDivider Class="my-2" />
        <MudText Typo="Typo.caption">Última selección: @DateTime.Now.ToString("dd/MM/yyyy HH:mm")</MudText>
    </MudPaper>
}

@code {
    private MudDataGrid<CampaniaListadoDTO>? dataGrid;
    private CampaniaListadoDTO? seleccionada;

    private string? _search;
    private string? Search
    {
        get => _search;
        set { if (_search == value) return; _search = value; _ = dataGrid?.ReloadServerData(); }
    }

    private string? _estado;
    private string? _canal;
    private string? _division;
    private DateRange? _rangoFechas;

    private IEnumerable<string> Estados => new[] { "Planificada", "En curso", "Pausada", "Finalizada" };
    private IEnumerable<string> Canales => _all.Select(x => x.Canal).Distinct().OrderBy(x => x);
    private IEnumerable<(string codigo, string nombre)> Divisiones =>
        _all.Select(x => (x.DivisionCodigo, x.DivisionNombre)).Distinct().OrderBy(x => x.DivisionCodigo)
            .Select(t => (t.DivisionCodigo, t.DivisionNombre));

    private Task ClearFilters()
    {
        _search = _estado = _canal = _division = null;
        _rangoFechas = null;
        seleccionada = null;
        return dataGrid?.ReloadServerData() ?? Task.CompletedTask;
    }

    // --- datos falsos ---
    private readonly List<CampaniaListadoDTO> _all = new()
    {
        // NRT
        new("Rebajas Primavera","En curso","Social", DateTime.Today.AddDays(-10), DateTime.Today.AddDays(20), "NRT", "División Norte"),
        new("Email Bienvenida","Finalizada","Email", DateTime.Today.AddDays(-40), DateTime.Today.AddDays(-20), "NRT", "División Norte"),
        new("Lanzamiento A","Planificada","Ads", DateTime.Today.AddDays(5), DateTime.Today.AddDays(30), "NRT", "División Norte"),
        new("Evento Bilbao","Planificada","Eventos", DateTime.Today.AddDays(15), DateTime.Today.AddDays(16), "NRT", "División Norte"),
        // SUR
        new("Promo Verano Sur","En curso","Ads", DateTime.Today.AddDays(-3), DateTime.Today.AddDays(25), "SUR", "División Sur"),
        new("Feria Málaga","Planificada","Eventos", DateTime.Today.AddDays(7), DateTime.Today.AddDays(9), "SUR", "División Sur"),
        new("Remarketing Sur","Pausada","Display", DateTime.Today.AddDays(-15), null, "SUR", "División Sur"),
        // ONL
        new("SEO Sprint Q3","En curso","SEO", DateTime.Today.AddDays(-12), DateTime.Today.AddDays(12), "ONL", "División Online"),
        new("Display Q2","Finalizada","Display", DateTime.Today.AddDays(-70), DateTime.Today.AddDays(-40), "ONL", "División Online"),
        new("Black Friday Prep","Planificada","Email", DateTime.Today.AddDays(50), DateTime.Today.AddDays(60), "ONL", "División Online"),
        new("Social UGC","Planificada","Social", DateTime.Today.AddDays(20), DateTime.Today.AddDays(45), "ONL", "División Online"),
        new("CRO Landing","Pausada","Web", DateTime.Today.AddDays(-5), null, "ONL", "División Online"),
        // EXP
        new("Lanzamiento LATAM","Finalizada","Social", DateTime.Today.AddDays(-120), DateTime.Today.AddDays(-90), "EXP", "División Export"),
        new("Feira Lisboa","Finalizada","Eventos", DateTime.Today.AddDays(-200), DateTime.Today.AddDays(-198), "EXP", "División Export"),
    };

    private Task<GridData<CampaniaListadoDTO>> ServerReload(GridState<CampaniaListadoDTO> state)
    {
        IEnumerable<CampaniaListadoDTO> data = _all;

        if (!string.IsNullOrWhiteSpace(_search))
        {
            var q = _search.Trim();
            data = data.Where(c =>
                c.Titulo.Contains(q, StringComparison.OrdinalIgnoreCase) ||
                c.Canal.Contains(q, StringComparison.OrdinalIgnoreCase) ||
                c.Estado.Contains(q, StringComparison.OrdinalIgnoreCase) ||
                c.DivisionCodigo.Contains(q, StringComparison.OrdinalIgnoreCase) ||
                c.DivisionNombre.Contains(q, StringComparison.OrdinalIgnoreCase));
        }

        if (!string.IsNullOrWhiteSpace(_estado))
            data = data.Where(c => c.Estado.Equals(_estado, StringComparison.OrdinalIgnoreCase));

        if (!string.IsNullOrWhiteSpace(_canal))
            data = data.Where(c => c.Canal.Equals(_canal, StringComparison.OrdinalIgnoreCase));

        if (!string.IsNullOrWhiteSpace(_division))
            data = data.Where(c => c.DivisionCodigo.Equals(_division, StringComparison.OrdinalIgnoreCase));

        if (_rangoFechas is not null)
        {
            var desde = _rangoFechas.Start?.Date;
            var hasta = _rangoFechas.End?.Date;
            if (desde is not null) data = data.Where(c => c.Inicio.Date >= desde);
            if (hasta is not null) data = data.Where(c => c.Inicio.Date <= hasta);
        }

        var sort = state.SortDefinitions.FirstOrDefault();
        if (sort is not null)
        {
            data = sort.SortBy switch
            {
                nameof(CampaniaListadoDTO.Titulo)         => sort.Descending ? data.OrderByDescending(x => x.Titulo)         : data.OrderBy(x => x.Titulo),
                nameof(CampaniaListadoDTO.Estado)         => sort.Descending ? data.OrderByDescending(x => x.Estado)         : data.OrderBy(x => x.Estado),
                nameof(CampaniaListadoDTO.Canal)          => sort.Descending ? data.OrderByDescending(x => x.Canal)          : data.OrderBy(x => x.Canal),
                nameof(CampaniaListadoDTO.DivisionCodigo) => sort.Descending ? data.OrderByDescending(x => x.DivisionCodigo) : data.OrderBy(x => x.DivisionCodigo),
                nameof(CampaniaListadoDTO.Inicio)         => sort.Descending ? data.OrderByDescending(x => x.Inicio)         : data.OrderBy(x => x.Inicio),
                _ => data
            };
        }

        var total = data.Count();
        var items = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return Task.FromResult(new GridData<CampaniaListadoDTO> { TotalItems = total, Items = items });
    }

    private void OnRowClick(DataGridRowClickEventArgs<CampaniaListadoDTO> args) => seleccionada = args.Item;
}
