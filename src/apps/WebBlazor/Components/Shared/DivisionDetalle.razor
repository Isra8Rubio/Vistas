@page "/divisiones/{id}"
@using MudBlazor
@using API.APIService
@inject APIClient Api
@inject NavigationManager Nav

<MudStack Row="true"
          AlignItems="AlignItems.Center"
          Class="pa-2 mt-4">
    <MudButton Variant="Variant.Outlined"
               Color="Color.Primary"
               StartIcon="@Icons.Material.Filled.ArrowBack"
               OnClick="@Back">
        Volver a Divisiones
    </MudButton>
</MudStack>

@if (loading)
{
    <MudCard Class="mt-3 mx-auto" Style="max-width: 1100px; border-radius: 12px;">
        <MudCardHeader>
            <CardHeaderContent>
                <MudSkeleton Width="280px" Height="28px" Animation="Animation.Wave" />
                <MudSkeleton Width="320px" Height="18px" Class="mt-2" Animation="Animation.Wave" />
            </CardHeaderContent>
        </MudCardHeader>
        <MudDivider />
        <MudCardContent>
            <MudSkeleton Width="180px" Height="24px" />
            @for (var i = 0; i < 6; i++)
            {
                <MudSkeleton Width="100%" Height="44px" Class="mt-2" />
            }
        </MudCardContent>
    </MudCard>
}
else if (error is not null)
{
    <MudAlert Severity="Severity.Error"
              Variant="Variant.Outlined"
              Elevation="0"
              Class="mt-3 mx-auto"
              Style="max-width: 1100px; border-radius: 12px;">
        <MudText Typo="Typo.h6" Class="mb-2">Error al cargar la división</MudText>
        <MudText>@error</MudText>
        <MudStack Row="true" Spacing="2" Class="mt-3">
            <MudButton OnClick="Reload"
                       Color="Color.Error"
                       StartIcon="@Icons.Material.Filled.Refresh">
                Reintentar
            </MudButton>
            <MudButton OnClick="Back" Variant="Variant.Outlined">Volver</MudButton>
        </MudStack>
    </MudAlert>
}
else if (division is not null)
{
    <!-- Cabecera -->
    <MudPaper Class="pa-5 mt-3 mx-auto"
              Style="max-width: 1100px; border-radius: 12px; border:1px solid var(--mud-palette-primary);">
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
            <MudStack Spacing="1">
                <MudText Typo="Typo.h5">@division.Name</MudText>
                @if (!string.IsNullOrWhiteSpace(division.Description))
                {
                    <MudText Typo="Typo.body2" Class="mud-text-secondary">@division.Description</MudText>
                }
            </MudStack>

            <MudStack Row="true" Spacing="1">
                <MudChip T="string" Variant="Variant.Outlined" Color="@(division.HomeDivision == true ? Color.Success : Color.Default)">
                    @(division.HomeDivision == true ? "Home" : "Normal")
                </MudChip>
                @if (division.ObjectCounts?.Count > 0)
                {
                    <MudChip T="string" Variant="Variant.Outlined">
                        Objetos: @division.ObjectCounts.Values.Sum()
                    </MudChip>
                }
            </MudStack>
        </MudStack>
    </MudPaper>

    <!-- Campañas de la división -->
    <MudCard Class="pa-0 mt-3 mx-auto" Style="max-width: 1100px; border-radius: 12px; overflow: hidden;">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Campañas de esta división</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudDivider />
        <MudCardContent Class="pa-4">
            <MudDataGrid @ref="grid"
                         T="QueueDTO"
                         ServerData="LoadQueues"
                         Hover="true"
                         Bordered="true"
                         Striped="true"
                         RowClick="OnQueueClick">

                <Columns>
                    <PropertyColumn Property="x => x.Name" Title="Campaña"
                                    HeaderStyle="text-align:left; font-weight:600"
                                    CellStyle="text-align:left; cursor:pointer" />

                    <PropertyColumn Property="x => x.MemberCount" Title="Miembros"
                                    HeaderStyle="text-align:center; font-weight:600"
                                    CellStyle="text-align:center; width:100px" />

                    <PropertyColumn Property="x => x.DateModified" Title="Últ. modificación"
                                    Format="dd/MM/yyyy HH:mm"
                                    HeaderStyle="text-align:center; font-weight:600; white-space:nowrap"
                                    CellStyle="text-align:center; width:180px" />
                </Columns>

                <PagerContent>
                    <MudDataGridPager T="QueueDTO" />
                </PagerContent>
            </MudDataGrid>
        </MudCardContent>
    </MudCard>
}

@code {
    [Parameter] public string? id { get; set; }

    private DivisionDTO? division;
    private MudDataGrid<QueueDTO>? grid;
    private bool loading = true;
    private string? error;

    protected override async Task OnParametersSetAsync()
    {
        loading = true; error = null; division = null;
        try
        {
            if (string.IsNullOrWhiteSpace(id))
            {
                error = "Id de división no válido.";
                return;
            }

            division = await Api.Divisions_GetDivisionByIdAsync(id);
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            loading = false;
        }
    }

    private async Task<GridData<QueueDTO>> LoadQueues(GridState<QueueDTO> state)
    {
        if (string.IsNullOrWhiteSpace(id))
            return new GridData<QueueDTO> { Items = Array.Empty<QueueDTO>(), TotalItems = 0 };

        try
        {
            var pageNumber = state.Page + 1;
            var pageSize = state.PageSize;

            // Nota: el cliente NSwag puede exponer 'divisionId' como IEnumerable<string> o string[].
            var result = await Api.Routing_GetQueuesDivisionviewsAsync(pageNumber, pageSize, new[] { id! });

            var total = (int)(result?.Total ?? 0);
            var items = (result?.Entities ?? Array.Empty<Queue>())
                .Select(q => new QueueDTO
                {
                    Id = q.Id,
                    Name = q.Name,
                    DateModified = q.DateModified
                })
                .ToList();

            return new GridData<QueueDTO> { Items = items, TotalItems = total };
        }
        catch (Exception ex)
        {
            error = ex.Message;
            return new GridData<QueueDTO> { Items = Array.Empty<QueueDTO>(), TotalItems = 0 };
        }
    }

    private void OnQueueClick(DataGridRowClickEventArgs<QueueDTO> args)
    {
        if (!string.IsNullOrWhiteSpace(args.Item?.Id))
            Nav.NavigateTo($"/campanias/{args.Item!.Id}");
    }

    private void Back() => Nav.NavigateTo("/divisiones");

    private void Reload()
    {
        _ = OnParametersSetAsync();
        StateHasChanged();
    }
}
