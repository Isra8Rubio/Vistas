@page "/grupos"
@using MudBlazor
@using API.APIService
@inject APIClient Api
@inject NavigationManager Nav

<MudGrid Class="mt-0">
    <MudItem xs="12" md="10">
        <MudDataGrid @ref="dataGrid"
                     T="GroupDTO"
                     ServerData="ServerReload"
                     Filterable="true"
                     Hover="true"
                     Dense="true"
                     Bordered="true"
                     Striped="true"
                     RowClick="GotoGroup"
                     Class="mt-4 pa-2"
                     Style="font-family: 'Inter', system-ui, -apple-system, Helvetica; font-variant-numeric: tabular-nums;">

            <ToolBarContent>
            <!-- Filtro por rango de fechas -->
                <MudDateRangePicker @bind-DateRange="Range"
                                    Label="Fechas"
                                    DateFormat="dd/MM/yyyy"
                                    Class="mr-2 mb-2"/>

                <MudSpacer />

            <!-- Buscar -->
                <MudTextField T="string"
                              @bind-Value="Search"
                              Label="Buscar"
                              Variant="Variant.Outlined"
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              AdornmentColor="Color.Primary"
                              Immediate="true"
                              DebounceInterval="300"
                              Class="mr-2 mb-2" />

            <!-- Limpiar -->
                <MudIconButton Icon="@Icons.Material.Filled.Clear"
                               OnClick="ClearFilters"
                               Class="mr-2 mb-2" />

            </ToolBarContent>

            <Columns>
                <PropertyColumn Property="x => x.Name" Title="Grupo" Sortable="true" Filterable="true"
                                HeaderStyle="text-align:left; font-size:.95rem; font-weight:600"
                                CellStyle="max-width:280px; white-space:nowrap; overflow:hidden; text-overflow:ellipsis; text-align:left; cursor:pointer" />

                <PropertyColumn Property="x => x.MemberCount" Title="Nº miembros" Sortable="true" Filterable="true"
                                HeaderStyle="text-align:left; font-size:.95rem; font-weight:600"
                                CellStyle="text-align:left; cursor:pointer" />

                <PropertyColumn Property="x => x.DateModified" Title="Último cambio" Sortable="true" Filterable="true"
                                Format="dd/MM/yyyy HH:mm"
                                HeaderStyle="text-align:left; font-size:.95rem; font-weight:600; white-space:nowrap"
                                CellStyle="text-align:center; cursor:pointer" />
            </Columns>

            <!-- Paginación -->
            <PagerContent>
                <MudDataGridPager T="GroupDTO" />
            </PagerContent>

        </MudDataGrid>
    </MudItem>
</MudGrid>

@code {
    private MudDataGrid<GroupDTO>? dataGrid;

    // === Filtros ===
    private string? _search;
    private string? Search
    {
        get => _search;
        set { if (_search == value) return; _search = value; _ = dataGrid?.ReloadServerData(); }
    }

    private DateRange? _range;
    private DateRange? Range
    {
        get => _range;
        set { _range = value; _ = dataGrid?.ReloadServerData(); }
    }

    private Task ClearFilters()
    {
        Search = null;
        Range = null;
        return dataGrid?.ReloadServerData() ?? Task.CompletedTask;
    }

    private async Task<GridData<GroupDTO>> ServerReload(GridState<GroupDTO> state)
    {
        try
        {
            var pageNumber = state.Page + 1;
            var pageSize = state.PageSize;

            var data = await Api.Groups_GetGroupsAsync(pageNumber, pageSize);

            var total = data.Total > 0 ? data.Total
                                       : (data.PageCount > 0 && data.PageSize > 0
                                          ? data.PageCount * data.PageSize
                                          : data.Entities.Count);

            IEnumerable<GroupDTO> items = data.Entities;

            // Filtro: texto
            if (!string.IsNullOrWhiteSpace(_search))
            {
                var q = _search.Trim();
                items = items.Where(x =>
                    (x.Name?.Contains(q, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (x.ListaUsuarios?.Any(u =>
                        (u.Name?.Contains(q, StringComparison.OrdinalIgnoreCase) ?? false) ||
                        (u.Email?.Contains(q, StringComparison.OrdinalIgnoreCase) ?? false)) ?? false));
            }

            // Filtro: rango de fechas en DateModified
            if (Range?.Start is not null)
            {
                var start = Range.Start.Value.Date;
                var end = (Range.End ?? Range.Start)!.Value.Date.AddDays(1).AddTicks(-1);
                items = items.Where(x => x.DateModified >= start && x.DateModified <= end);
            }

            return new GridData<GroupDTO>
            {
                TotalItems = (int)total,
                Items = items.ToList()
            };
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex);
            return new GridData<GroupDTO> { TotalItems = 0, Items = [] };
        }
    }

    private void GotoGroup(DataGridRowClickEventArgs<GroupDTO> args)
    {
        if (!string.IsNullOrWhiteSpace(args.Item.Id))
            Nav.NavigateTo($"/grupos/{args.Item.Id}");
    }
}
