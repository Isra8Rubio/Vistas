@page "/usuarios/{id}"
@using MudBlazor
@using API.APIService
@inject APIClient Api
@inject NavigationManager Nav

<!-- Boton volver -->
<MudStack Row="true"
          AlignItems="AlignItems.Center"
          Justify="Justify.FlexStart"
          Class="pa-2 mt-4"
          Style="width:100%;">
    <MudButton Variant="Variant.Outlined"
               Color="Color.Primary"
               StartIcon="@Icons.Material.Filled.ArrowBack"
               OnClick="@Back"
               Class="pa-2">
        Volver
    </MudButton>
</MudStack>

@if (loading)
{
    <!-- Skeleton: Card con avatar -->
    <MudPaper Class="pa-4 mt-3 mx-auto" Style="max-width: 680px; background-color: var(--mud-palette-table-striped); border:2px solid white;">
        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
            <MudSkeleton Width="56px" Height="56px" Animation="Animation.Wave" Variant="Variant.Circular" />
            <MudStack Spacing="1">
                <MudSkeleton Width="220px" Height="20px" Animation="Animation.Wave" />
                <MudSkeleton Width="280px" Height="16px" Animation="Animation.Wave" />
            </MudStack>
        </MudStack>
        <MudDivider Class="my-3" />
        <MudSkeleton Width="140px" Height="16px" Animation="Animation.Wave" />
        <MudStack Row="true" Spacing="1" Class="mt-2" Wrap="Wrap.Wrap">
            @for (var i = 0; i < 6; i++)
            {
                <MudSkeleton Width="90px" Height="28px" Animation="Animation.Wave" Class="mb-1" />
            }
        </MudStack>
    </MudPaper>
}
else if (error is not null)
{
    <MudAlert Severity="Severity.Error" Variant="Variant.Outlined" Elevation="0" Class="mt-3 mx-auto" Style="max-width: 680px;">
        @error
        <MudButton OnClick="Reload" Color="Color.Error" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Refresh" Class="ml-2">
            Reintentar
        </MudButton>
    </MudAlert>
}
else if (user is not null)
{
    <MudCard Class="pa-0 mt-3 mx-auto" Style="max-width: 680px; border:2px solid white; background-color: var(--mud-palette-table-striped);">
        <MudCardHeader>
            <CardHeaderAvatar>
                <MudAvatar Size="Size.Large" Color="Color.Primary" Variant="Variant.Filled">
                    @Initials(user.Name)
                </MudAvatar>
            </CardHeaderAvatar>
            <CardHeaderContent>
                <MudText Typo="Typo.h5" Class="mb-n1">@user.Name</MudText>
                <MudText Typo="Typo.body2" Class="mud-text-secondary">@user.Email</MudText>
            </CardHeaderContent>
        </MudCardHeader>

        <MudDivider />

        <MudCardContent Class="pa-4">
            <MudStack Spacing="1">
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                    <MudText Typo="Typo.subtitle2">
                        Grupos
                    </MudText>
                    @if ((user.ListaGrupos?.Count ?? 0) > 0)
                    {
                        <MudChip T="int" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" StartIcon="@Icons.Material.Filled.Groups">
                            @(user.ListaGrupos!.Count)
                        </MudChip>
                    }
                </MudStack>

                @if (user.ListaGrupos is { Count: > 0 })
                {
                    <!-- Chips de grupos -->
                    <MudChipSet T="string" ReadOnly="true" Class="mt-1">
                        @foreach (var g in user.ListaGrupos!)
                        {
                            var label = !string.IsNullOrWhiteSpace(g?.Name) ? g!.Name : g?.Id;
                                <MudChip T="string"
                                         Variant="Variant.Outlined"
                                         Color="Color.Primary"
                                         StartIcon="@Icons.Material.Filled.Group"
                                         Size="Size.Small"
                                         Class="mr-1 mb-1">
                                    @label
                                </MudChip>
                        }
                    </MudChipSet>
                }
                else
                {
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1" Class="mud-text-secondary">
                        <MudIcon Icon="@Icons.Material.Outlined.Info" />
                        <MudText Typo="Typo.caption">Sin grupos</MudText>
                    </MudStack>
                }
            </MudStack>
        </MudCardContent>
    </MudCard>
}

@code {
    [Parameter] public string? id { get; set; }

    private UserDTO? user;
    private bool loading = true;
    private string? error;

    protected override async Task OnParametersSetAsync()
    {
        loading = true; error = null; user = null;
        try
        {
            if (string.IsNullOrWhiteSpace(id))
            {
                error = "Id de usuario no válido.";
                return;
            }
            user = await Api.Users_GetUserByIdAsync(id);
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            loading = false;
        }
    }

    void Back() => Nav.NavigateTo("/usuarios");

    void Reload()
    {
        _ = OnParametersSetAsync();
        StateHasChanged();
    }

    static string Initials(string? name)
    {
        if (string.IsNullOrWhiteSpace(name)) return "?";
        var parts = name.Trim().Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length == 1) return parts[0].Substring(0, 1).ToUpperInvariant();
        return (parts[0].Substring(0, 1) + parts[^1].Substring(0, 1)).ToUpperInvariant();
    }
}
