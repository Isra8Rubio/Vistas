@page "/campanias"
@using MudBlazor
@using API.APIService
@inject APIClient Api
@inject NavigationManager Nav

<MudGrid Class="mt-0">
    <MudItem xs="12" md="10">
        <MudDataGrid @ref="dataGrid"
                     T="QueueDTO"
                     ServerData="ServerReload"
                     Filterable="true"
                     Hover="true"
                     Dense="true"
                     Bordered="true"
                     Striped="true"
                     RowClick="GotoCampaign"
                     Class="mt-1 pa-2"
                     Style="font-family: 'Inter', system-ui, -apple-system, Helvetica; font-variant-numeric: tabular-nums;">

            <ToolBarContent>
                <MudSpacer />
                <MudTextField T="string"
                              @bind-Value="Search"
                              Label="Buscar"
                              Variant="Variant.Outlined"
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              AdornmentColor="Color.Primary"
                              Immediate="true"
                              DebounceInterval="300"
                              Class="mt-2 mb-1" />
                <MudIconButton Icon="@Icons.Material.Filled.Clear"
                               OnClick="ClearFilters"
                               Class="ml-1 mt-2" />
            </ToolBarContent>

            <Columns>
                <!-- Campaña / Cola -->
                <PropertyColumn Property="x => x.Name" Title="Campaña" Sortable="true" Filterable="true"
                                HeaderStyle="text-align:left; font-size:.95rem; font-weight:600"
                                CellStyle="max-width:320px; white-space:nowrap; overflow:hidden; text-overflow:ellipsis; text-align:left; cursor:pointer" />

                <!-- Nº miembros -->
                <TemplateColumn Title="Nº miembros" Sortable="true" Filterable="false"
                                HeaderStyle="text-align:left; font-size:.95rem; font-weight:600"
                                CellStyle="text-align:left">
                    <CellTemplate>
                        @((context.Item.MemberCount.HasValue ? context.Item.MemberCount.Value.ToString("N0") : "—"))
                    </CellTemplate>
                </TemplateColumn>

                <!-- Último cambio -->
                <TemplateColumn Title="Último cambio" Sortable="true" Filterable="false"
                                HeaderStyle="text-align:left; font-size:.95rem; font-weight:600; white-space:nowrap"
                                CellStyle="text-align:center">
                    <CellTemplate>
                        @(context.Item.DateModified.HasValue
                                                ? context.Item.DateModified.Value.ToString("dd/MM/yyyy HH:mm")
                                                : "—")
                    </CellTemplate>
                </TemplateColumn>
            </Columns>

            <PagerContent>
                <MudDataGridPager T="QueueDTO" />
            </PagerContent>
        </MudDataGrid>
    </MudItem>
</MudGrid>

@code {
    private MudDataGrid<QueueDTO>? dataGrid;

    private string? _search;
    private string? Search
    {
        get => _search;
        set { if (_search == value) return; _search = value; _ = dataGrid?.ReloadServerData(); }
    }

    private Task ClearFilters()
    {
        _search = null;
        return dataGrid?.ReloadServerData() ?? Task.CompletedTask;
    }

    private async Task<GridData<QueueDTO>> ServerReload(GridState<QueueDTO> state)
    {
        try
        {
            var pageNumber = state.Page + 1;
            var pageSize = state.PageSize;
            var data = await Api.Routing_GetQueuesAsync(pageNumber, pageSize, Array.Empty<string>());

            var total = data.Total > 0
                        ? data.Total
                        : (data.PageCount > 0 && data.PageSize > 0
                           ? data.PageCount * data.PageSize
                           : data.Entities.Count);

            IEnumerable<QueueDTO> items = data.Entities ?? new List<QueueDTO>();

            if (!string.IsNullOrWhiteSpace(_search))
            {
                var q = _search.Trim();
                items = items.Where(x => x.Name?.Contains(q, StringComparison.OrdinalIgnoreCase) ?? false);
            }

            return new GridData<QueueDTO>
            {
                TotalItems = (int)total,
                Items = items.ToList()
            };
        }
        catch
        {
            return new GridData<QueueDTO> { TotalItems = 0, Items = Array.Empty<QueueDTO>() };
        }
    }

    private void GotoCampaign(DataGridRowClickEventArgs<QueueDTO> args)
    {
        if (!string.IsNullOrWhiteSpace(args.Item.Id))
            Nav.NavigateTo($"/campanias/{args.Item.Id}");
    }
}
